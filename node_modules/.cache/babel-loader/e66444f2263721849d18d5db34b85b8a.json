{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport { noop } from '../utils/noop.js';\nconst config = {\n  root: null,\n  rootMargin: \"0px 0px 0px 0px\",\n  threshold: [0, 1]\n};\n/**\r\n *\r\n * useIntersectionObserverRef hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation\r\n * @param {IntersectionObserverInit} options\r\n * @see https://react-hooks.org/docs/useIntersectionObserverRef\r\n */\nfunction useIntersectionObserverRef(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config;\n  const {\n    root = null,\n    rootMargin,\n    threshold\n  } = options;\n  const [node, setNode] = useState(null);\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (node && callback) {\n      const observer = new IntersectionObserver(callback, options);\n      // Start observing the target node for configured mutations\n      observer.observe(node);\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return noop;\n  }, [node, callback, root, rootMargin, threshold, options]);\n  const ref = useCallback(nodeElement => {\n    setNode(nodeElement);\n  }, []);\n  return [ref];\n}\nexport { useIntersectionObserverRef };","map":{"version":3,"names":["useState","useEffect","useCallback","noop","config","root","rootMargin","threshold","useIntersectionObserverRef","callback","options","node","setNode","observer","IntersectionObserver","observe","disconnect","ref","nodeElement"],"sources":["C:/github/wanted/node_modules/rooks/dist/esm/hooks/useIntersectionObserverRef.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { noop } from '../utils/noop.js';\n\nconst config = {\r\n    root: null,\r\n    rootMargin: \"0px 0px 0px 0px\",\r\n    threshold: [0, 1],\r\n};\r\n/**\r\n *\r\n * useIntersectionObserverRef hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {IntersectionObserverCallback} callback Function that needs to be fired on mutation\r\n * @param {IntersectionObserverInit} options\r\n * @see https://react-hooks.org/docs/useIntersectionObserverRef\r\n */\r\nfunction useIntersectionObserverRef(callback, options = config) {\r\n    const { root = null, rootMargin, threshold } = options;\r\n    const [node, setNode] = useState(null);\r\n    useEffect(() => {\r\n        // Create an observer instance linked to the callback function\r\n        if (node && callback) {\r\n            const observer = new IntersectionObserver(callback, options);\r\n            // Start observing the target node for configured mutations\r\n            observer.observe(node);\r\n            return () => {\r\n                observer.disconnect();\r\n            };\r\n        }\r\n        return noop;\r\n    }, [node, callback, root, rootMargin, threshold, options]);\r\n    const ref = useCallback((nodeElement) => {\r\n        setNode(nodeElement);\r\n    }, []);\r\n    return [ref];\r\n}\n\nexport { useIntersectionObserverRef };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,MAAMC,MAAM,GAAG;EACXC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,iBAAiB;EAC7BC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0B,CAACC,QAAQ,EAAoB;EAAA,IAAlBC,OAAO,uEAAGN,MAAM;EAC1D,MAAM;IAAEC,IAAI,GAAG,IAAI;IAAEC,UAAU;IAAEC;EAAU,CAAC,GAAGG,OAAO;EACtD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtCC,SAAS,CAAC,MAAM;IACZ;IACA,IAAIU,IAAI,IAAIF,QAAQ,EAAE;MAClB,MAAMI,QAAQ,GAAG,IAAIC,oBAAoB,CAACL,QAAQ,EAAEC,OAAO,CAAC;MAC5D;MACAG,QAAQ,CAACE,OAAO,CAACJ,IAAI,CAAC;MACtB,OAAO,MAAM;QACTE,QAAQ,CAACG,UAAU,EAAE;MACzB,CAAC;IACL;IACA,OAAOb,IAAI;EACf,CAAC,EAAE,CAACQ,IAAI,EAAEF,QAAQ,EAAEJ,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEG,OAAO,CAAC,CAAC;EAC1D,MAAMO,GAAG,GAAGf,WAAW,CAAEgB,WAAW,IAAK;IACrCN,OAAO,CAACM,WAAW,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACD,GAAG,CAAC;AAChB;AAEA,SAAST,0BAA0B"},"metadata":{},"sourceType":"module"}