{"ast":null,"code":"import { useState } from 'react';\nimport { useDebounce } from './useDebounce.js';\nimport { useDidMount } from './useDidMount.js';\nimport { useDidUpdate } from './useDidUpdate.js';\nconst defaultUseDebounceValueOptions = {\n  initializeWithNull: false\n};\n/**\r\n * useDebouncedValue\r\n * @param value The value to debounce\r\n * @param timeout The duration to debounce\r\n * @param options The options object.\r\n * @see https://react-hooks.org/docs/useDebouncedValue\r\n */\nconst useDebouncedValue = function (value, timeout) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  // eslint-disable-next-line prefer-object-spread\n  const {\n    initializeWithNull\n  } = Object.assign({}, defaultUseDebounceValueOptions, options);\n  const [updatedValue, setUpdatedValue] = useState(initializeWithNull ? null : value);\n  const debouncedSetUpdatedValue = useDebounce(setUpdatedValue, timeout);\n  useDidMount(() => {\n    if (initializeWithNull) {\n      debouncedSetUpdatedValue(value);\n    }\n  });\n  useDidUpdate(() => {\n    debouncedSetUpdatedValue(value);\n  }, [value]);\n  // No need to add `debouncedSetUpdatedValue ` to dependencies as it is a ref.current.\n  // returning both updatedValue and setUpdatedValue (not the debounced version) to instantly update this if  needed.\n  return [updatedValue, setUpdatedValue];\n};\nexport { useDebouncedValue };","map":{"version":3,"names":["useState","useDebounce","useDidMount","useDidUpdate","defaultUseDebounceValueOptions","initializeWithNull","useDebouncedValue","value","timeout","options","Object","assign","updatedValue","setUpdatedValue","debouncedSetUpdatedValue"],"sources":["C:/github/wanted/node_modules/rooks/dist/esm/hooks/useDebouncedValue.js"],"sourcesContent":["import { useState } from 'react';\nimport { useDebounce } from './useDebounce.js';\nimport { useDidMount } from './useDidMount.js';\nimport { useDidUpdate } from './useDidUpdate.js';\n\nconst defaultUseDebounceValueOptions = {\r\n    initializeWithNull: false,\r\n};\r\n/**\r\n * useDebouncedValue\r\n * @param value The value to debounce\r\n * @param timeout The duration to debounce\r\n * @param options The options object.\r\n * @see https://react-hooks.org/docs/useDebouncedValue\r\n */\r\nconst useDebouncedValue = (value, timeout, options = {}) => {\r\n    // eslint-disable-next-line prefer-object-spread\r\n    const { initializeWithNull } = Object.assign({}, defaultUseDebounceValueOptions, options);\r\n    const [updatedValue, setUpdatedValue] = useState(initializeWithNull ? null : value);\r\n    const debouncedSetUpdatedValue = useDebounce(setUpdatedValue, timeout);\r\n    useDidMount(() => {\r\n        if (initializeWithNull) {\r\n            debouncedSetUpdatedValue(value);\r\n        }\r\n    });\r\n    useDidUpdate(() => {\r\n        debouncedSetUpdatedValue(value);\r\n    }, [value]);\r\n    // No need to add `debouncedSetUpdatedValue ` to dependencies as it is a ref.current.\r\n    // returning both updatedValue and setUpdatedValue (not the debounced version) to instantly update this if  needed.\r\n    return [updatedValue, setUpdatedValue];\r\n};\n\nexport { useDebouncedValue };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,MAAMC,8BAA8B,GAAG;EACnCC,kBAAkB,EAAE;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,UAACC,KAAK,EAAEC,OAAO,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EACnD;EACA,MAAM;IAAEJ;EAAmB,CAAC,GAAGK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,8BAA8B,EAAEK,OAAO,CAAC;EACzF,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAACK,kBAAkB,GAAG,IAAI,GAAGE,KAAK,CAAC;EACnF,MAAMO,wBAAwB,GAAGb,WAAW,CAACY,eAAe,EAAEL,OAAO,CAAC;EACtEN,WAAW,CAAC,MAAM;IACd,IAAIG,kBAAkB,EAAE;MACpBS,wBAAwB,CAACP,KAAK,CAAC;IACnC;EACJ,CAAC,CAAC;EACFJ,YAAY,CAAC,MAAM;IACfW,wBAAwB,CAACP,KAAK,CAAC;EACnC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX;EACA;EACA,OAAO,CAACK,YAAY,EAAEC,eAAe,CAAC;AAC1C,CAAC;AAED,SAASP,iBAAiB"},"metadata":{},"sourceType":"module"}