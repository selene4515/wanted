{"ast":null,"code":"import { useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\nconst config = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\n/**\r\n *\r\n * useMutationObserver hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\r\n * @param {MutationCallback} callback Function that needs to be fired on mutation\r\n * @param {MutationObserverInit} options\r\n * @see https://react-hooks.org/docs/useMutationObserver\r\n */\nfunction useMutationObserver(ref, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config;\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (ref.current) {\n      const observer = new MutationObserver(callback);\n      // Start observing the target node for configured mutations\n      observer.observe(ref.current, options);\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return noop;\n  }, [callback, options, ref]);\n}\nexport { useMutationObserver };","map":{"version":3,"names":["useEffect","noop","config","attributes","characterData","childList","subtree","useMutationObserver","ref","callback","options","current","observer","MutationObserver","observe","disconnect"],"sources":["C:/github/wanted/node_modules/rooks/dist/esm/hooks/useMutationObserver.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\n\nconst config = {\r\n    attributes: true,\r\n    characterData: true,\r\n    childList: true,\r\n    subtree: true,\r\n};\r\n/**\r\n *\r\n * useMutationObserver hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {MutableRefObject<HTMLElement | null>} ref React ref on which mutations are to be observed\r\n * @param {MutationCallback} callback Function that needs to be fired on mutation\r\n * @param {MutationObserverInit} options\r\n * @see https://react-hooks.org/docs/useMutationObserver\r\n */\r\nfunction useMutationObserver(ref, callback, options = config) {\r\n    useEffect(() => {\r\n        // Create an observer instance linked to the callback function\r\n        if (ref.current) {\r\n            const observer = new MutationObserver(callback);\r\n            // Start observing the target node for configured mutations\r\n            observer.observe(ref.current, options);\r\n            return () => {\r\n                observer.disconnect();\r\n            };\r\n        }\r\n        return noop;\r\n    }, [callback, options, ref]);\r\n}\n\nexport { useMutationObserver };\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,MAAMC,MAAM,GAAG;EACXC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAE,IAAI;EACnBC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,mBAAmB,CAACC,GAAG,EAAEC,QAAQ,EAAoB;EAAA,IAAlBC,OAAO,uEAAGR,MAAM;EACxDF,SAAS,CAAC,MAAM;IACZ;IACA,IAAIQ,GAAG,CAACG,OAAO,EAAE;MACb,MAAMC,QAAQ,GAAG,IAAIC,gBAAgB,CAACJ,QAAQ,CAAC;MAC/C;MACAG,QAAQ,CAACE,OAAO,CAACN,GAAG,CAACG,OAAO,EAAED,OAAO,CAAC;MACtC,OAAO,MAAM;QACTE,QAAQ,CAACG,UAAU,EAAE;MACzB,CAAC;IACL;IACA,OAAOd,IAAI;EACf,CAAC,EAAE,CAACQ,QAAQ,EAAEC,OAAO,EAAEF,GAAG,CAAC,CAAC;AAChC;AAEA,SAASD,mBAAmB"},"metadata":{},"sourceType":"module"}