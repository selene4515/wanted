{"ast":null,"code":"import { useState, useRef, useCallback, useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\n\n/**\r\n * useThrottle\r\n * Throttles a function with a timeout and ensures\r\n * that the callback function runs at most once in that duration\r\n *\r\n * @param callback The callback to throttle\r\n * @param timeout Throttle timeout\r\n * @returns [Callback, isReady] The throttled callback and if it is currently throttled\r\n * @see https://react-hooks.org/docs/useThrottle\r\n */\nfunction useThrottle(callback) {\n  let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n  const [ready, setReady] = useState(true);\n  const timerRef = useRef(undefined);\n  const throttledFunction = useCallback(function () {\n    if (!ready) {\n      return;\n    }\n    setReady(false);\n    callback(...arguments);\n  }, [ready, callback]);\n  useEffect(() => {\n    if (!ready) {\n      timerRef.current = window.setTimeout(() => {\n        setReady(true);\n      }, timeout);\n      return () => window.clearTimeout(timerRef.current);\n    }\n    return noop;\n  }, [ready, timeout]);\n  return [throttledFunction, ready];\n}\nexport { useThrottle };","map":{"version":3,"names":["useState","useRef","useCallback","useEffect","noop","useThrottle","callback","timeout","ready","setReady","timerRef","undefined","throttledFunction","current","window","setTimeout","clearTimeout"],"sources":["C:/github/wanted/node_modules/rooks/dist/esm/hooks/useThrottle.js"],"sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\nimport { noop } from '../utils/noop.js';\n\n/**\r\n * useThrottle\r\n * Throttles a function with a timeout and ensures\r\n * that the callback function runs at most once in that duration\r\n *\r\n * @param callback The callback to throttle\r\n * @param timeout Throttle timeout\r\n * @returns [Callback, isReady] The throttled callback and if it is currently throttled\r\n * @see https://react-hooks.org/docs/useThrottle\r\n */\r\nfunction useThrottle(callback, timeout = 300) {\r\n    const [ready, setReady] = useState(true);\r\n    const timerRef = useRef(undefined);\r\n    const throttledFunction = useCallback((...args) => {\r\n        if (!ready) {\r\n            return;\r\n        }\r\n        setReady(false);\r\n        callback(...args);\r\n    }, [ready, callback]);\r\n    useEffect(() => {\r\n        if (!ready) {\r\n            timerRef.current = window.setTimeout(() => {\r\n                setReady(true);\r\n            }, timeout);\r\n            return () => window.clearTimeout(timerRef.current);\r\n        }\r\n        return noop;\r\n    }, [ready, timeout]);\r\n    return [throttledFunction, ready];\r\n}\n\nexport { useThrottle };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAChE,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAW,CAACC,QAAQ,EAAiB;EAAA,IAAfC,OAAO,uEAAG,GAAG;EACxC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMU,QAAQ,GAAGT,MAAM,CAACU,SAAS,CAAC;EAClC,MAAMC,iBAAiB,GAAGV,WAAW,CAAC,YAAa;IAC/C,IAAI,CAACM,KAAK,EAAE;MACR;IACJ;IACAC,QAAQ,CAAC,KAAK,CAAC;IACfH,QAAQ,CAAC,YAAO,CAAC;EACrB,CAAC,EAAE,CAACE,KAAK,EAAEF,QAAQ,CAAC,CAAC;EACrBH,SAAS,CAAC,MAAM;IACZ,IAAI,CAACK,KAAK,EAAE;MACRE,QAAQ,CAACG,OAAO,GAAGC,MAAM,CAACC,UAAU,CAAC,MAAM;QACvCN,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC,EAAEF,OAAO,CAAC;MACX,OAAO,MAAMO,MAAM,CAACE,YAAY,CAACN,QAAQ,CAACG,OAAO,CAAC;IACtD;IACA,OAAOT,IAAI;EACf,CAAC,EAAE,CAACI,KAAK,EAAED,OAAO,CAAC,CAAC;EACpB,OAAO,CAACK,iBAAiB,EAAEJ,KAAK,CAAC;AACrC;AAEA,SAASH,WAAW"},"metadata":{},"sourceType":"module"}