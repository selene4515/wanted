{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\nimport { noop } from '../utils/noop.js';\nconst config = {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true\n};\n/**\r\n *\r\n * useMutationObserverRef hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {MutationCallback} callback Function that needs to be fired on mutation\r\n * @param {MutationObserverInit} options\r\n * @see https://react-hooks.org/docs/useMutationObserverRef\r\n */\nfunction useMutationObserverRef(callback) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config;\n  const [node, setNode] = useState(null);\n  useEffect(() => {\n    // Create an observer instance linked to the callback function\n    if (node) {\n      const observer = new MutationObserver(callback);\n      // Start observing the target node for configured mutations\n      observer.observe(node, options);\n      return () => {\n        observer.disconnect();\n      };\n    }\n    return noop;\n  }, [node, callback, options]);\n  const ref = useCallback(nodeElement => {\n    setNode(nodeElement);\n  }, []);\n  return [ref];\n}\nexport { useMutationObserverRef };","map":{"version":3,"names":["useState","useEffect","useCallback","noop","config","attributes","characterData","childList","subtree","useMutationObserverRef","callback","options","node","setNode","observer","MutationObserver","observe","disconnect","ref","nodeElement"],"sources":["C:/github/wanted/node_modules/rooks/dist/esm/hooks/useMutationObserverRef.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { noop } from '../utils/noop.js';\n\nconst config = {\r\n    attributes: true,\r\n    characterData: true,\r\n    childList: true,\r\n    subtree: true,\r\n};\r\n/**\r\n *\r\n * useMutationObserverRef hook\r\n *\r\n * Returns a mutation observer for a React Ref and fires a callback\r\n *\r\n * @param {MutationCallback} callback Function that needs to be fired on mutation\r\n * @param {MutationObserverInit} options\r\n * @see https://react-hooks.org/docs/useMutationObserverRef\r\n */\r\nfunction useMutationObserverRef(callback, options = config) {\r\n    const [node, setNode] = useState(null);\r\n    useEffect(() => {\r\n        // Create an observer instance linked to the callback function\r\n        if (node) {\r\n            const observer = new MutationObserver(callback);\r\n            // Start observing the target node for configured mutations\r\n            observer.observe(node, options);\r\n            return () => {\r\n                observer.disconnect();\r\n            };\r\n        }\r\n        return noop;\r\n    }, [node, callback, options]);\r\n    const ref = useCallback((nodeElement) => {\r\n        setNode(nodeElement);\r\n    }, []);\r\n    return [ref];\r\n}\n\nexport { useMutationObserverRef };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,MAAMC,MAAM,GAAG;EACXC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAE,IAAI;EACnBC,SAAS,EAAE,IAAI;EACfC,OAAO,EAAE;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,CAACC,QAAQ,EAAoB;EAAA,IAAlBC,OAAO,uEAAGP,MAAM;EACtD,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtCC,SAAS,CAAC,MAAM;IACZ;IACA,IAAIW,IAAI,EAAE;MACN,MAAME,QAAQ,GAAG,IAAIC,gBAAgB,CAACL,QAAQ,CAAC;MAC/C;MACAI,QAAQ,CAACE,OAAO,CAACJ,IAAI,EAAED,OAAO,CAAC;MAC/B,OAAO,MAAM;QACTG,QAAQ,CAACG,UAAU,EAAE;MACzB,CAAC;IACL;IACA,OAAOd,IAAI;EACf,CAAC,EAAE,CAACS,IAAI,EAAEF,QAAQ,EAAEC,OAAO,CAAC,CAAC;EAC7B,MAAMO,GAAG,GAAGhB,WAAW,CAAEiB,WAAW,IAAK;IACrCN,OAAO,CAACM,WAAW,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EACN,OAAO,CAACD,GAAG,CAAC;AAChB;AAEA,SAAST,sBAAsB"},"metadata":{},"sourceType":"module"}