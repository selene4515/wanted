{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nconst defaultOptions = {};\n/**\r\n *\r\n * useInput Hook\r\n *\r\n * Handles an input's value and onChange props internally to\r\n * make text input creation process easier\r\n *\r\n * @param {unknown} [initialValue] Initial value of the input\r\n * @param {Options} [options] Options object\r\n * @returns {InputHandler} Input handler with value and onChange\r\n * @see https://react-hooks.org/docs/useInput\r\n */\nfunction useInput() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const [value, setValue] = useState(initialValue);\n  const onChange = useCallback(event => {\n    const newValue = event.target.value;\n    let shouldUpdate = true;\n    if (typeof options.validate === \"function\") {\n      shouldUpdate = options.validate(newValue, value);\n    }\n    if (shouldUpdate) {\n      setValue(newValue);\n    }\n  }, [options, value]);\n  // sync with default value\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  const handler = {\n    onChange,\n    value\n  };\n  return handler;\n}\nexport { useInput };","map":{"version":3,"names":["useState","useCallback","useEffect","defaultOptions","useInput","initialValue","options","value","setValue","onChange","event","newValue","target","shouldUpdate","validate","handler"],"sources":["C:/github/wanted/node_modules/rooks/dist/esm/hooks/useInput.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nconst defaultOptions = {};\r\n/**\r\n *\r\n * useInput Hook\r\n *\r\n * Handles an input's value and onChange props internally to\r\n * make text input creation process easier\r\n *\r\n * @param {unknown} [initialValue] Initial value of the input\r\n * @param {Options} [options] Options object\r\n * @returns {InputHandler} Input handler with value and onChange\r\n * @see https://react-hooks.org/docs/useInput\r\n */\r\nfunction useInput(initialValue = \"\", options = defaultOptions) {\r\n    const [value, setValue] = useState(initialValue);\r\n    const onChange = useCallback((event) => {\r\n        const newValue = event.target.value;\r\n        let shouldUpdate = true;\r\n        if (typeof options.validate === \"function\") {\r\n            shouldUpdate = options.validate(newValue, value);\r\n        }\r\n        if (shouldUpdate) {\r\n            setValue(newValue);\r\n        }\r\n    }, [options, value]);\r\n    // sync with default value\r\n    useEffect(() => {\r\n        setValue(initialValue);\r\n    }, [initialValue]);\r\n    const handler = {\r\n        onChange,\r\n        value,\r\n    };\r\n    return handler;\r\n}\n\nexport { useInput };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAExD,MAAMC,cAAc,GAAG,CAAC,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQ,GAA8C;EAAA,IAA7CC,YAAY,uEAAG,EAAE;EAAA,IAAEC,OAAO,uEAAGH,cAAc;EACzD,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACK,YAAY,CAAC;EAChD,MAAMI,QAAQ,GAAGR,WAAW,CAAES,KAAK,IAAK;IACpC,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACL,KAAK;IACnC,IAAIM,YAAY,GAAG,IAAI;IACvB,IAAI,OAAOP,OAAO,CAACQ,QAAQ,KAAK,UAAU,EAAE;MACxCD,YAAY,GAAGP,OAAO,CAACQ,QAAQ,CAACH,QAAQ,EAAEJ,KAAK,CAAC;IACpD;IACA,IAAIM,YAAY,EAAE;MACdL,QAAQ,CAACG,QAAQ,CAAC;IACtB;EACJ,CAAC,EAAE,CAACL,OAAO,EAAEC,KAAK,CAAC,CAAC;EACpB;EACAL,SAAS,CAAC,MAAM;IACZM,QAAQ,CAACH,YAAY,CAAC;EAC1B,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAClB,MAAMU,OAAO,GAAG;IACZN,QAAQ;IACRF;EACJ,CAAC;EACD,OAAOQ,OAAO;AAClB;AAEA,SAASX,QAAQ"},"metadata":{},"sourceType":"module"}